{"ast":null,"code":"import axios from 'axios';\n\n// Get the API URL from environment variables or use default\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid, clear storage and redirect to login\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/signin';\n  }\n  return Promise.reject(error);\n});\n\n// Authentication functions\nexport const authAPI = {\n  // Register a new user\n  register: async userData => {\n    const response = await api.post('/api/auth/register', userData);\n    return response.data;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await api.post('/api/auth/login', credentials);\n    return response.data;\n  },\n  // Get user profile\n  getProfile: async () => {\n    const response = await api.get('/api/auth/profile');\n    return response.data;\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\n\n// Utility functions\nexport const isAuthenticated = () => {\n  const token = localStorage.getItem('token');\n  return !!token;\n};\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\nexport const setAuthToken = token => {\n  if (token) {\n    localStorage.setItem('token', token);\n  } else {\n    localStorage.removeItem('token');\n  }\n};\nexport const setUser = user => {\n  if (user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  } else {\n    localStorage.removeItem('user');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","data","login","credentials","getProfile","get","logout","isAuthenticated","getCurrentUser","user","JSON","parse","setAuthToken","setItem","setUser","stringify"],"sources":["C:/Users/rd112/OneDrive/Desktop/ds project/datascienceproject/data-science-platform/frontend/src/utils/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get the API URL from environment variables or use default\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add request interceptor to include auth token\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Add response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n        if (error.response?.status === 401) {\r\n            // Token expired or invalid, clear storage and redirect to login\r\n            localStorage.removeItem('token');\r\n            localStorage.removeItem('user');\r\n            window.location.href = '/signin';\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Authentication functions\r\nexport const authAPI = {\r\n    // Register a new user\r\n    register: async (userData) => {\r\n        const response = await api.post('/api/auth/register', userData);\r\n        return response.data;\r\n    },\r\n\r\n    // Login user\r\n    login: async (credentials) => {\r\n        const response = await api.post('/api/auth/login', credentials);\r\n        return response.data;\r\n    },\r\n\r\n    // Get user profile\r\n    getProfile: async () => {\r\n        const response = await api.get('/api/auth/profile');\r\n        return response.data;\r\n    },\r\n\r\n    // Logout user\r\n    logout: () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n    },\r\n};\r\n\r\n// Utility functions\r\nexport const isAuthenticated = () => {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n};\r\n\r\nexport const setAuthToken = (token) => {\r\n    if (token) {\r\n        localStorage.setItem('token', token);\r\n    } else {\r\n        localStorage.removeItem('token');\r\n    }\r\n};\r\n\r\nexport const setUser = (user) => {\r\n    if (user) {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n    } else {\r\n        localStorage.removeItem('user');\r\n    }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}