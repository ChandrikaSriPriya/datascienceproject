{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptors for request and response\napi.interceptors.request.use(config => {\n  // You can add token or other headers here if needed\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle errors globally\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","error","Promise","reject","response"],"sources":["C:/Users/User/Desktop/ramna priya/data-science-platform/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Interceptors for request and response\napi.interceptors.request.use(\n    (config) => {\n        // You can add token or other headers here if needed\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\napi.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        // Handle errors globally\n        return Promise.reject(error);\n    }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR;EACA,OAAOA,MAAM;AACjB,CAAC,EACAC,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAEDX,GAAG,CAACO,YAAY,CAACO,QAAQ,CAACL,GAAG,CACxBK,QAAQ,IAAK;EACV,OAAOA,QAAQ;AACnB,CAAC,EACAH,KAAK,IAAK;EACP;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}